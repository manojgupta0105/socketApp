{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stockData","date","seconds","Math","floor","Date","interval","data","JSON","parse","stringify","console","log","forEach","stockItem","itemStatus","value","name","status","timeAgo","moment","diff","timeStamp","setState","stockDataKeys","keys","react_default","a","createElement","className","map","item","style","background","concat","build_default","url","onMessage","handleData","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RA2HeA,qBA9Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAW,IAJIR,yEAQTS,GAER,IAAIC,EAAUC,KAAKC,OAAO,IAAIC,KAASJ,GAAQ,KAE3CK,EAAWH,KAAKC,MAAMF,EAAU,SAEpC,OAAII,EAAW,EACNA,EAAW,UAEpBA,EAAWH,KAAKC,MAAMF,EAAU,SACjB,EACNI,EAAW,WAEpBA,EAAWH,KAAKC,MAAMF,EAAU,QACjB,EACNI,EAAW,SAEpBA,EAAWH,KAAKC,MAAMF,EAAU,OACjB,EACNI,EAAW,UAEpBA,EAAWH,KAAKC,MAAMF,EAAU,KACjB,EACNI,EAAW,WAEbH,KAAKC,MAAMF,GAAW,8CAGpBK,GACT,IAAMP,EAAYQ,KAAKC,MAAMD,KAAKE,UAAUf,KAAKI,MAAMC,YACvDW,QAAQC,IAAIL,GAEZC,KAAKC,MAAMF,GAAMM,QAAQ,SAACC,GACxB,IAAIC,EAAa,EACjBJ,QAAQC,MACLZ,EAAUc,EAAU,MAEnBC,EADCD,EAAU,GAAKd,EAAUc,EAAU,IAAIE,QAAU,EACrC,EACLF,EAAU,GAAKd,EAAUc,EAAU,IAAIE,MAAQ,EAC1C,GAEC,GAIdhB,EAAUc,EAAU,MACtBd,EAAUc,EAAU,IAAM,IAE5Bd,EAAUc,EAAU,IAAIG,KAAOH,EAAU,GACzCd,EAAUc,EAAU,IAAIE,MAAQF,EAAU,GAC1Cd,EAAUc,EAAU,IAAII,OAASH,EACjCf,EAAUc,EAAU,IAAIK,QAAUC,MAASC,KAAKrB,EAAUc,EAAU,IAAIQ,UAAW,WACnFtB,EAAUc,EAAU,IAAIQ,UAAYF,QAGtCzB,KAAK4B,SAAS,CAACvB,+CAER,IACAA,EAAaL,KAAKI,MAAlBC,UACDwB,EAAgB/B,OAAOgC,KAAKzB,GAElC,OADAW,QAAQC,IAAI,aAAcZ,GAExB0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAYdH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,6BAGFF,EAAAC,EAAAC,cAAA,aACCJ,EAAcM,IAAI,SAACC,GAClB,OAAQL,EAAAC,EAAAC,cAAA,UACNF,EAAAC,EAAAC,cAAA,UAAK5B,EAAU+B,GAAMd,MACrBS,EAAAC,EAAAC,cAAA,MAAII,MAAO,CAACC,WAAU,GAAAC,OAAgC,IAA3BlC,EAAU+B,GAAMb,OAAe,eAA6C,IAA5BlB,EAAU+B,GAAMb,OAAgB,MAAQ,WAAclB,EAAU+B,GAAMf,OACjJU,EAAAC,EAAAC,cAAA,UAAK5B,EAAU+B,GAAMZ,QAArB,qBAMRO,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAWS,IA3GH,4BA4GJC,UAAW1C,KAAK2C,WAAWC,KAAK5C,iBAxG5B6C,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.298a1d67.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import io from 'socket.io-client';\nimport Websocket from 'react-websocket';\n// import _ from 'lodash';\n// import logo from './logo.svg';\nimport moment from 'moment';\nimport './App.css';\n\nconst serverUrl = \"ws://stocks.mnet.website/\";\n// const socket = io(serverUrl);\n// const socket = io(socketProtocol, { transports: ['websocket'] });\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stockData: {},\n    };\n  }\n\n  timeSince(date) {\n\n    var seconds = Math.floor((new Date() - date) / 1000);\n  \n    var interval = Math.floor(seconds / 31536000);\n  \n    if (interval > 1) {\n      return interval + \" years\";\n    }\n    interval = Math.floor(seconds / 2592000);\n    if (interval > 1) {\n      return interval + \" months\";\n    }\n    interval = Math.floor(seconds / 86400);\n    if (interval > 1) {\n      return interval + \" days\";\n    }\n    interval = Math.floor(seconds / 3600);\n    if (interval > 1) {\n      return interval + \" hours\";\n    }\n    interval = Math.floor(seconds / 60);\n    if (interval > 1) {\n      return interval + \" minutes\";\n    }\n    return Math.floor(seconds) + \" seconds\";\n  }\n\n  handleData(data) {\n    const stockData = JSON.parse(JSON.stringify(this.state.stockData));\n    console.log(data);\n\n    JSON.parse(data).forEach((stockItem) => {\n      let itemStatus = 0;\n      console.log();\n      if(stockData[stockItem[0]]) {\n        if(stockItem[1] - stockData[stockItem[0]].value === 0) {\n          itemStatus = 0;\n        } else if(stockItem[1] - stockData[stockItem[0]].value > 0) {\n          itemStatus = 1;\n        } else {\n          itemStatus = -1;\n        }\n      }\n\n      if(!stockData[stockItem[0]]) {\n        stockData[stockItem[0]] = {};\n      }\n      stockData[stockItem[0]].name = stockItem[0];\n      stockData[stockItem[0]].value = stockItem[1];\n      stockData[stockItem[0]].status = itemStatus;\n      stockData[stockItem[0]].timeAgo = moment().diff(stockData[stockItem[0]].timeStamp, 'seconds');\n      stockData[stockItem[0]].timeStamp = moment();\n    });\n\n    this.setState({stockData});\n  }\n  render() {\n    const {stockData} = this.state;\n    const stockDataKeys = Object.keys(stockData);\n    console.log('stockData ', stockData);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          {/* <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          > */}\n            {/* {JSON.stringify(this.state.stockData)} */}\n            <table>\n              <thead>\n              <tr>\n                <th>Product</th>\n                <th>Value</th>\n                <th>Update Status</th>\n              </tr>\n              </thead>\n              <tbody>\n              {stockDataKeys.map((item) => {\n                return (<tr>\n                  <td>{stockData[item].name}</td>\n                  <td style={{background: `${stockData[item].status === 0 ? 'transparent' : (stockData[item].status === -1 ? 'red' : 'green')}`}}>{stockData[item].value}</td>\n                  <td>{stockData[item].timeAgo} seconds ago</td>\n                </tr>);\n              })}\n              </tbody>\n            </table>\n          {/* </a> */}\n          <Websocket url={serverUrl}\n              onMessage={this.handleData.bind(this)}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}